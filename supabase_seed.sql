-- Supabase seed for Hamburg Frontend MVP (Option A - simple metrics with VIEW)
-- Run inside Supabase SQL editor

-- 0) Extensions
create extension if not exists "pgcrypto";

-- 1) Core tables
create table if not exists public.socios (
  id uuid primary key default gen_random_uuid(),
  nombre text not null,
  documento text not null unique,
  email text,
  telefono text,
  activo boolean not null default true,
  creado_en timestamptz not null default now(),
  actualizado_en timestamptz not null default now()
);

create table if not exists public.periodos (
  id uuid primary key default gen_random_uuid(),
  mes smallint not null check (mes between 1 and 12),
  anio integer not null,
  importe numeric(10,2) not null,
  creado_en timestamptz not null default now(),
  unique (mes, anio)
);

create table if not exists public.cuotas_socios (
  id uuid primary key default gen_random_uuid(),
  socio_id uuid not null references public.socios(id) on delete cascade,
  periodo_id uuid not null references public.periodos(id) on delete cascade,
  periodo text,
  importe numeric(10,2) not null,
  estado text not null default 'pendiente' check (estado in ('pendiente', 'pagado', 'vencido', 'rechazado')),
  vencimiento date,
  creado_en timestamptz not null default now(),
  unique (socio_id, periodo_id)
);

create table if not exists public.pagos (
  id uuid primary key default gen_random_uuid(),
  socio_id uuid not null references public.socios(id) on delete cascade,
  periodo_id uuid references public.periodos(id) on delete set null,
  periodo text,
  monto numeric(10,2) not null,
  metodo text not null default 'manual', -- 'manual' | 'mp' | 'transferencia'
  referencia text,                        -- usar como unique si integrás MP (mp_payment_id)
  creado_en timestamptz not null default now()
);

create table if not exists public.usuarios (
  id uuid primary key default gen_random_uuid(), -- si usás Supabase Auth, también podés usar auth.uid()
  email text not null unique,
  rol text not null default 'operador' check (rol in ('admin', 'contador', 'operador', 'socio')),
  socio_id uuid references public.socios(id) on delete set null,
  creado_en timestamptz not null default now()
);

create table if not exists public.auditoria (
  id bigint generated by default as identity primary key,
  actor uuid references public.usuarios(id),
  accion text not null,
  entidad text not null,
  entidad_id uuid,
  datos jsonb,
  creado_en timestamptz not null default now()
);

-- 2) Helper: periodo text (YYYY-MM) on cuotas_socios
create or replace function public.set_periodo_text()
returns trigger as $$
begin
  select concat(p.anio, '-', lpad(p.mes::text, 2, '0'))
    into new.periodo
  from public.periodos p
  where p.id = new.periodo_id;
  return new;
end;
$$ language plpgsql;

drop trigger if exists cuotas_periodo_text on public.cuotas_socios;
create trigger cuotas_periodo_text
before insert or update on public.cuotas_socios
for each row execute function public.set_periodo_text();

-- 3) Dashboard stats (scalar function)
create or replace function public.dashboard_stats()
returns table (socios integer, morosos integer, pagos integer)
as $$
  select
    (select count(*) from public.socios)::integer as socios,
    (select count(*) from public.cuotas_socios where estado = 'vencido')::integer as morosos,
    (select count(*) from public.pagos where creado_en >= date_trunc('month', now())
                                       and creado_en <  (date_trunc('month', now()) + interval '1 month'))::integer as pagos;
$$ language sql stable;

-- 4) Simple metrics VIEW (Option A) - NOT in Realtime publication
create or replace view public.reportes_view as
select
  'Socios activos'::text as label,
  count(*)::numeric as value
from public.socios
where activo = true
union all
select 'Morosos'::text, count(*)::numeric from public.cuotas_socios where estado = 'vencido'
union all
select 'Pagos del mes'::text,
  count(*)::numeric
from public.pagos
where creado_en >= date_trunc('month', now())
  and creado_en <  (date_trunc('month', now()) + interval '1 month');

-- 5) Realtime publication (ONLY TABLES, NOT VIEWS)
alter publication supabase_realtime add table public.socios;
alter publication supabase_realtime add table public.cuotas_socios;
alter publication supabase_realtime add table public.pagos;
-- optional:
-- alter publication supabase_realtime add table public.periodos;

-- 6) RLS policies (read for authenticated users)
alter table public.socios enable row level security;
alter table public.cuotas_socios enable row level security;
alter table public.pagos enable row level security;
alter table public.periodos enable row level security;

-- Drop previous policies if exist (safe to run multiple times)
do $$ begin
  if exists (select 1 from pg_policies where schemaname='public' and tablename='socios' and policyname='socios_select_auth') then
    drop policy "socios_select_auth" on public.socios;
  end if;
  if exists (select 1 from pg_policies where schemaname='public' and tablename='cuotas_socios' and policyname='cuotas_socios_select_auth') then
    drop policy "cuotas_socios_select_auth" on public.cuotas_socios;
  end if;
  if exists (select 1 from pg_policies where schemaname='public' and tablename='pagos' and policyname='pagos_select_auth') then
    drop policy "pagos_select_auth" on public.pagos;
  end if;
  if exists (select 1 from pg_policies where schemaname='public' and tablename='periodos' and policyname='periodos_select_auth') then
    drop policy "periodos_select_auth" on public.periodos;
  end if;
end $$;

create policy "socios_select_auth" on public.socios for select to authenticated using (true);
create policy "cuotas_socios_select_auth" on public.cuotas_socios for select to authenticated using (true);
create policy "pagos_select_auth" on public.pagos for select to authenticated using (true);
create policy "periodos_select_auth" on public.periodos for select to authenticated using (true);

-- 7) Helpful indexes (no IMMUTABLE expressions)
create unique index if not exists pagos_ref_uniq on public.pagos (referencia);
create index if not exists cuotas_socios_estado_idx on public.cuotas_socios (estado);
create index if not exists pagos_creado_en_idx on public.pagos (creado_en);

-- 8) Seed minimal data
insert into public.socios (nombre, documento, email)
values
  ('Ana Müller', '30123456', 'ana@example.com'),
  ('Carlos Pérez', '30999888', 'carlos@example.com')
on conflict do nothing;

insert into public.periodos (mes, anio, importe)
values
  (extract(month from now())::int, extract(year from now())::int, 15000),
  ((extract(month from now())::int % 12) + 1, extract(year from now())::int + case when extract(month from now())::int = 12 then 1 else 0 end, 15000)
on conflict do nothing;
